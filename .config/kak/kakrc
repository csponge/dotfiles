## Some pickers
define-command -hidden open-buffer-picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden open-file-picker %{
  prompt file: -menu -shell-script-candidates 'fd --type=file' %{
    edit -existing %val{text}
  }
}

define-command -hidden open-rg-picker %{
  prompt search: %{
    prompt refine: -menu -shell-script-candidates "rg -in '%val{text}'" %{
      eval "edit -existing  %sh{(cut -d ' ' -f 1 | tr ':' ' ' ) <<< $kak_text}"
    }
  }
}

map global user f :open-file-picker<ret>
map global user b :open-buffer-picker<ret>
map global user g :open-rg-picker<ret>

colorscheme base16

add-highlighter /global number-lines -relative

set-option -add global ui_options terminal_assistant=none

hook global WinCreate .*\.go %{ set-option global makecmd "go build" }
hook global WinCreate .*\.(cc|cpp|cxx) %{ set-option global makecmd "cmake" }

eval %sh{kak-lsp --session %val{session} --kakoune}
hook global WinSetOption filetype=(go|c|cpp) %{
    lsp-enable-window
    lsp-inlay-diagnostics-enable global
    map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
    map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
    map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
    map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
    map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
    map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
    map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
    map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
}
